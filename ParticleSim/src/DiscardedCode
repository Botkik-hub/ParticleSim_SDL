    void UpdateWater(int x, int y);
    void UpdateSand(int x, int y);
    void UpdateParticle(Particle* particle, int x, int y);


void Field::UpdateSand(int x, int y)
{
    if (y >= m_height) return;

    const int ind = Ind(x, y);
    const int indUnder = Ind(x, y + 1);
    
    if (m_particles[indUnder].type == ParticleType::None || m_particles[indUnder].type == ParticleType::Water )
    {
        SwapParticles(ind, indUnder);
        return;
    }
    const int indUnderLeft = Ind(x - 1, y + 1);
    if (x > 0 && m_particles[indUnderLeft].type == ParticleType::None || m_particles[indUnderLeft].type == ParticleType::Water )
    {
        SwapParticles(ind, indUnderLeft);
        return;
    }
    const int indUnderRight = Ind(x + 1, y + 1);
    if (x < m_width - 1 && m_particles[indUnderRight].type == ParticleType::None || m_particles[indUnderRight].type == ParticleType::Water )
    {
        SwapParticles(ind, indUnderRight);
        return;
    }
}


void Field::UpdateParticle(Particle* particle, int x, int y)
{
    switch (particle->type)
    {
    case ParticleType::None:
        break;
    case ParticleType::Sand:
        UpdateSand(x, y);
        break;
    case ParticleType::Water:
        UpdateWater(x, y);
        break;
    }
}

void Field::UpdateWater(int x, int y)
{
    const int ind = Ind(x, y);
    const int indUnder = Ind(x, y + 1);
    if (y < m_height - 1 && m_particles[indUnder].type == ParticleType::None)
    {
        SwapParticles(ind, indUnder);
        return;
    }
    const int indUnderLeft = Ind(x - 1, y + 1);
    if (y < m_height - 1 && x > 0 && m_particles[indUnderLeft].type == ParticleType::None)
    {
        SwapParticles(ind, indUnderLeft);
        return;
    }
    const int indUnderRight = Ind(x + 1, y + 1);
    if (y < m_height - 1 && x < m_width - 1 && m_particles[indUnderRight].type == ParticleType::None)
    {
        SwapParticles(ind, indUnderRight);
        return;
    }
    const int indLeft = Ind(x - 1, y);
    if (x > 0 && m_particles[indLeft].type == ParticleType::None)
    {
        SwapParticles(ind, indLeft);
        return;
    }
    const int indRight = Ind(x + 1, y);
    if (x < m_width - 1 && m_particles[indRight].type == ParticleType::None)
    {
        SwapParticles(ind, indRight);
        return;
    }
}
